using HealthcareManager.Components.Base;
using HealthcareManager.Data.Models;
using HealthcareManager.Utility;
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using System.Diagnostics.CodeAnalysis;
using System.Reflection;
using Telerik.Blazor;
using Telerik.Blazor.Components;

namespace HealthcareManager.Components.Account.Shared.Components
{
    public partial class CustomGridTable<T> : IGridTable where T : class
    {
        public T ctx;
        public TelerikGrid<T> GridRef;
        [Inject]
        private IJSRuntime JS { get; set; }
        [Inject]
        private NavigationManager NavigationManager { get; set; }
        [Parameter]
        public IEnumerable<T> Data { get; set; } = new List<T>();
        [Parameter]
        public IEnumerable<T> SelectedData { get; set; } = Enumerable.Empty<T>();
        [Parameter]
        public GridEditMode EditMode { get; set; } = GridEditMode.Popup;
        [Parameter]
        public string Size { get; set; } = Telerik.Blazor.ThemeConstants.Grid.Size.Small;
        [Parameter]
        public bool IsCustomEdit { get; set; } = false;
        [Parameter]
        public bool CanAdd { get; set; }
        [Parameter]
        public bool CanExportExcel { get; set; } = true;
        [Parameter]
        public bool CanExportPDF { get; set; } = false;
        [Parameter]
        public GridSettingsModel Settings { get; set; }
        [Parameter]
        public int PageSize { get; set; } = 10;
        [Parameter]
        public string Class { get; set; }
        [Parameter]
        public string FileName { get; set; } = "Grid Export";
        [Parameter]
        public bool AutoGeneratedColumns { get; set; } = false;
        [Parameter]
        public bool Groupable { get; set; } = true;
        [Parameter]
        public bool Pageable { get; set; } = true;
        [Parameter]
        public bool Sortable { get; set; } = true;
        [Parameter]
        public bool ShowCommandColumn { get; set; } = true;
        [Parameter]
        public bool GridValidation { get; set; } = false;
        [Parameter]
        public GridSelectionMode SelectionMode { get; set; } = GridSelectionMode.Single;
        [Parameter, AllowNull]
        public RenderFragment ToolbarButtons { get; set; }
        [Parameter, AllowNull]
        public RenderFragment AdditionalButtons { get; set; }
        [Parameter, AllowNull]
        public RenderFragment Detail { get; set; }
        [Parameter]
        public RenderFragment Columns { get; set; }
        [Parameter]
        public RenderFragment InfoContent { get; set; }
        [Parameter]
        public RenderFragment CustomFormTemplate { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> AddHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> CreateHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> EditHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> UpdateHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> DeleteHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> CancelHandler { get; set; }
        [Parameter]
        public EventCallback<GridCommandEventArgs> ShowInfoHandler { get; set; }
        [Parameter, AllowNull]
        public Action<GridRowRenderEventArgs> CustomRowRenderHandler { get; set; }
        [Parameter]
        public EventCallback<bool> VisibleChangedHandler { get; set; }
        [CascadingParameter]
        private AppState AppState { get; set; }
        [Parameter, AllowNull]
        public bool CanEdit { get; set; } = true;
        [Parameter, AllowNull]
        public bool CustomRowRender { get; set; } = false;
        [Parameter]
        public string ModalTitle { get; set; } = "View Records";
        [Parameter]
        public string ModalHeight { get; set; } = "auto";
        [Parameter]
        public string ModalWidth { get; set; } = "auto";
        public bool ShowInfo { get; set; } = false;
        private bool CanDelete { get; set; } = false;
        private MemoryStream exportStream { get; set; }
        public async Task OnAddHandler(GridCommandEventArgs args)
        {
            Settings.Title = "AddRecord";
        }
        public async Task OnEditHandler(GridCommandEventArgs args)
        {
            Settings.Title = "Edit Record";
            await EditHandler.InvokeAsync(args);
        }
        public async Task OnCreateHandler(GridCommandEventArgs args)
        {
        }
        public async Task OnUpdateHandler(GridCommandEventArgs args)
        {
        }
        public async Task OnDeleteHandler(GridCommandEventArgs args)
        {
        }
        public async Task OnCancelHandler(GridCommandEventArgs args)
        {
            await CancelHandler.InvokeAsync(args);
        }
        private async Task GetExportStream()
        {
            MemoryStream finalizedStream = await GridRef.ExportToExcelAsync();
            exportStream = new MemoryStream(finalizedStream.ToArray());
            //string exportString = await DocService.ExportToPdf(exportStream);
            //await JS.InvokeVoidAsync("saveFile.save", exportString, "application/pdf", $"{FileName}.pdf");
        }
        protected override async Task OnInitializedAsync()
        {
            AppState.OnChange += StateHasChanged;
            //if (CanEdit != false)
            //    await SetCanEdit();
            FileName = $"{DateTime.Now.ToShortDateString()}";
            await base.OnInitializedAsync();
        }
        protected void OnSelect(IEnumerable<T> SelectedItems)
        {
            SelectedData = SelectedItems;
        }
        public async Task OnVisibleChangedHandler(bool currVisible)
        {
            ShowInfo = currVisible;
            await VisibleChangedHandler.InvokeAsync(currVisible);
        }
        public async Task OnShowInfoHandler(GridCommandEventArgs args)
        {
            await ShowInfoHandler.InvokeAsync(args);
        }
        private void OnRowRenderHandler(GridCommandEventArgs args)
        {
            object? item = args.Item;
            bool noHierarchy = true;
            List<PropertyInfo> props = item.GetType().GetProperties().Where(x => x.PropertyType.IsGenericType && x.PropertyType.GetGenericTypeDefinition() == typeof(List<>) && x.Name.Contains("Roles")).ToList();
            //if(props.Count > 0)
            //    foreach(PropertyInfo prop in  props)
            //    {
            //        IList? p = prop.GetValue(item) as IList;
            //        if(p != null && p.Count > 0)
            //        {
            //            noHierarchy = !noHierarchy;
            //            break;
            //        }
            //    }
            //args.Class = noHierarchy ? "no-children" : "";
            //if (CustomRowRender)
            //    CustomRowRenderHandler.Invoke(args);
        }
        private async Task SetCanEdit()
        {
        }
        private void Dispose()
        {
            AppState.OnChange -= StateHasChanged;
        }
    }
}
