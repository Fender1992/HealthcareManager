@page "/Account/medications"
@using HealthcareManager.Data
@using HealthcareManager.Repositories.MedicationsRepository

@using Microsoft.EntityFrameworkCore

<AuthorizeView>
    <Authorized Context="authContext">
<h3>Available Medications</h3>

@if (medications == null || !medications.Any())
{
    <p><em>Available medications list is empty. Try again later....</em></p>
}
else
{
    <TelerikGrid Data="@medications" Pageable="true" Sortable="true" FilterMode="@GridFilterMode.FilterMenu">
        <GridToolBarTemplate>
            @* <TelerikButton OnClick="@Navigate" Icon="FontIcon.Plus">Add Record</TelerikButton> *@
            @* <button>
                <NavLink class="nav-link" href="/Account/new-appointment"></NavLink>
            </button> *@
        </GridToolBarTemplate>
        <GridColumns>
            @* <GridColumn Filterable="true" Sortable="true" Field="MedicationId" Title="Id" /> *@
            <GridColumn Filterable="true" Sortable="true" Field="MedicationName" Title="Medication Name" />
            <GridColumn Filterable="true" Sortable="true" Field="MedicationDescription" Title="Description" />
            <GridColumn Filterable="true" Sortable="true" Field="MedicationType" Title="Class" />
            <GridColumn Filterable="true" Sortable="true" Field="MedicationCount" Title="Count" />
        </GridColumns>
    </TelerikGrid>
}
    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    private MedicationRepository? medicationRepository { get; set; } 
    private List<MedicationsDTO> medications { get; set; } = new List<MedicationsDTO>();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(medications != null)
            {
                medications = await medicationRepository.GetAllAsync();
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            throw new InvalidOperationException("An error occurred while retrieving medications.", ex);
        }

    }
}
