@page "/Account/Register/Data"
@using HealthcareManager.Data.Models
@using HealthcareManager.Data
@using Telerik.Blazor.Components

@inject ILogger<DataForm> Logger
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <h3>Encounter Form</h3>
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h1>Data Form</h1>
                        </div>
                        <div class="card-body">
                            <EditForm Model="Model" FormName="User-Data-Form" OnValidSubmit="SubmitUserData" Context="editContext">
                                <DataAnnotationsValidator />
                                <h2>Submit a new form.</h2>
                                <hr />
                                <ValidationSummary class="text-danger" role="alert" />

                                <div class="form-group mb-3">
                                    <TelerikDatePicker @bind-Value="Model.CreatedDate" ReadOnly="true" />
                                    <label for="createdDate">Created Date</label>
                                </div>

                                <div class="form-group mb-3">
                                    <label for="firstname">First Name</label>
                                    <TelerikTextBox @bind-Value="Model.FirstName" Placeholder="John" />
                                    <ValidationMessage For="() => Model.FirstName" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="lastname">Last Name</label>
                                    <TelerikTextBox @bind-Value="Model.LastName" Placeholder="Doe" />
                                    <ValidationMessage For="() => Model.LastName" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="address">Address</label>
                                    <TelerikTextBox @bind-Value="Model.Address" Placeholder="123 street road" />
                                    <ValidationMessage For="() => Model.Address" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="postalcode">Zip Code</label>
                                    <TelerikNumericTextBox @bind-Value="Model.PostalCode" Format="N0" />
                                    <ValidationMessage For="() => Model.PostalCode" class="text-danger" />
                                </div>

                                <h3>Vitals</h3>
                                <hr />

                                <div class="form-group mb-3">
                                    <label for="temperature">Temperature</label>
                                    <TelerikNumericTextBox @bind-Value="Model.Temperature" Format="N2" />
                                    <ValidationMessage For="() => Model.Temperature" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="bloodpressure">Blood Pressure (Sys/Dia)</label>
                                    <TelerikTextBox @bind-Value="Model.BloodPressure" Placeholder="120/80" />
                                    <ValidationMessage For="() => Model.BloodPressure" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="heartrate">Heart Rate (bpm)</label>
                                    <TelerikNumericTextBox @bind-Value="Model.HeartRate" Format="N0" />
                                    <ValidationMessage For="() => Model.HeartRate" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="pulseox">Pulse Oximetry</label>
                                    <TelerikNumericTextBox @bind-Value="Model.PulseOximetry" Format="N0" />
                                    <ValidationMessage For="() => Model.PulseOximetry" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="height">Height (in)</label>
                                    <TelerikNumericTextBox @bind-Value="Model.Height" Format="N0" />
                                    <ValidationMessage For="() => Model.Height" class="text-danger" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="weight">Weight (lbs)</label>
                                    <TelerikNumericTextBox @bind-Value="Model.Weight" Format="N0" />
                                    <ValidationMessage For="() => Model.Weight" class="text-danger" />
                                </div>

                                <button type="submit" class="btn btn-primary w-100">Submit</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    public EditContext? _editContext { get; set; }
    private ApplicationUserDTO Model { get; set; }
    [CascadingParameter]
    private AppState? AppState { get; set; }

    public DataForm()
    {
        Model = new ApplicationUserDTO();
    }

    protected override void OnInitialized()
    {
        Model.CreatedDate = DateTime.Now;
    }

    public async Task SubmitUserData(EditContext editContext)
    {
        _editContext = editContext;
        if (editContext.Validate())
        {
            try
            {
                var newForm = new ApplicationUserDTO
                    {
                        CreatedDate = Model.CreatedDate,
                        FirstName = Model.FirstName,
                        LastName = Model.LastName,
                        Address = Model.Address,
                        PostalCode = Model.PostalCode,
                        BloodPressure = Model.BloodPressure,
                        HeartRate = Model.HeartRate,
                        Temperature = Model.Temperature,
                        Height = Model.Height,
                        Weight = Model.Weight,
                        PulseOximetry = Model.PulseOximetry,
                    };

                await dbContext.AddAsync<ApplicationUserDTO>(newForm);
                await dbContext.SaveChangesAsync();

                //AppState.Notifier.SuccessNotification("Patient encounter successfully saved");


                //AppState.NavigationManager.NavigateTo("/");
            }
            catch (Exception e)
            {
                Logger.LogError(e, e.Message);
            }
        }
    }
}
